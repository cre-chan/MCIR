// ----the start of basic token definition----

//identifier
identifier=@{
    (ASCII_ALPHA|"_")~(ASCII_ALPHANUMERIC|"_")*
}

// interger literal
interger=@{
    ASCII_DIGIT+
}

// rule for string literal
string=${
    "\""~inner~"\""
}
inner=${char*}
char={
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "n" | "t")
    | "\\" ~ ASCII_OCT_DIGIT{3}
}

compareop={
    "="
    |"<>"
    |">="
    |"<="
    |">"
    |"<"
}

// The boolop will be translated into if-else clause
// So no corresponding operators. And no directly parsing
boolop={
    "&"
    |"|"
}

plusorminus={
    "+"
    |"-"
}

timesordiv={
    "*"
    |"/"
}

// ----end of basic token definition----

//Declaration for variables, types and functions
declist={
    decl*
}
decl={
    tydec|
    vardec|
    fundec
}
tydec={
    "type"~identifier~"="~typ
}
typ={
    identifier|
    "{"~fieldlist~"}"|
    "array"~"of"~identifier
}
fieldlist={//NOT CORRECT!!
    field~","~fieldlist
    |field
}
field={
    identifier~":"~identifier
}
vardec={
    "var"~identifier~":="~exp
    |"var"~identifier~":"~identifier~":="~exp
}
fundec={
    "function"~identifier~"("~fieldlist~")"~":"~identifier~"="~exp
    |"function"~identifier~"("~fieldlist~")"~"="~exp
}


//All kinds of expressions

//left values
lvalue={
    identifier~"."~identifier
    |identifier~"["~exp~"]"
    |identifier
}

//expressions
exp={
    assign_exp
    |let_exp
    |while_exp
    |for_exp
    |logicterm~("|"~logicterm)*//the generator contains the sole identifier situation, so the precedence must be lower
}

logicterm={
    logicfactor~("|"~logicfactor)*
}

logicfactor={
    compareterm~compareop~compareterm
    |compareterm
}

compareterm={
    term~(plusorminus~term)*
}

term={
    unary~(timesordiv~unary)*
}

unary={
    "-"?~factor
}

factor={
    identifier~"("~explist~")"//function call
    |record
    |array
    |lvalue//named variable
    |"nil"
    |interger
    |string
    |"("~exp~")"
    |"break"
    |if_exp
}

//used in function call, used to fill the actual parameters
explist={
    exp~(","~exp)*
    |""
}


//consecutive expressions
exp_seq={
    (exp~";")+~exp
}



// Start of Record syntax definition
efield={
    identifier~"="~exp
}

efield_list={
    efield~(","~efield)*
}
record={
    identifier~"{"~(efield_list)~"}"
}
// End of Record syntax definition


// Start of array literal
array={
    identifier~"["~exp~"]"~"of"~identifier
}
// End of array literal


assign_exp={
    identifier~":="~exp
}
if_exp={
    "if"~exp~"then"~exp~"else"~exp
}

while_exp={
    "while"~exp~"do"~exp
}

for_exp={
    "for"~identifier~":="~exp~"to"~exp~"do"~exp
}

let_exp={
    "let"~declist~"in"~exp_seq~"end"
}


program={
    SOI~exp~EOI
}

//ignore space, tab and end of lines
WHITESPACE=_{" "|"\t"|"\r"|"\n"}
